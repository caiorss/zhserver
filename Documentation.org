#+TITLE: Development Documentation 
#+DESCRIPTION: Documentation for Developers 
#+KEYWORKDS: zotero papers docs documents patent search metadata notes haskell database 
#+STARTUP: contents 

#+INFOJS_OPT: view:info toc:t ltoc:t ftoc:nil mouse:underline button:nil path:theme/org-info.js
#+HTML_HEAD: <link href="theme/style.css" rel="stylesheet"> 



* Development Documentation 
** REPL Testing and Exploration in the REPL
*** Zotero Module 

Example about how to connec to the database and query the data in the REPL.

#+BEGIN_SRC haskell 
  >
  > :t runDBConn 
  runDBConn :: HDBConn -> DBConn a -> IO a

  > let uri = "sqlite:///home/arch/.mozilla/firefox/dic34vce.default/zotero/zotero2.sqlite" 
  > 
  > Just db <- openDBConnection uri 
  > 
  > :t db
  db :: HDBConn
  > 
  > let rows = runD
  runDBConn   runDbQuery
  > rows <- runDBConn db (collectionItems 211)
  > 
  > rows
  [2917,2921,2922,2924,2925,3099,6602,6603,6604,6618,6620,6621]
  > 
  > 
  > item <- runDBConn db (getZoteroItem 5120)
  > item
  ZoteroItem {zoteroItemID = 5120, zoteroItemData = [("url","https://en.wikipedia.org/wiki/Order_book_(trading)"),("accessDate","2015-06-24 10:12:56"),("title","Order book (trading) - Wikipedia, the free encyclopedia")], zoteroItemAuthors = [], zoteroItemTags = [], zoteroItemCollections = [(262,"OCAML")], zoteroItemFile = Just "DKD757F3/Order_book_(trading).html", zoteroItemMime = Nothing}

  > zoteroItemTags item
  []

  > zoteroItemCollections item
  [(262,"OCAML")]

  > zoteroItemAuthors item
  []

  > zoteroItemData item
  [("url","https://en.wikipedia.org/wiki/Order_book_(trading)"),("accessDate","2015-06-24 10:12:56"),("title","Order book (trading) - Wikipedia, the free encyclopedia")]
  ,*Main Zotero>      


   > json <- runDBConn db (getZoteroItemJSON 5120)
  > LC.putStrLn json
  {"mime":null,"colls":[[262,"OCAML"]],"data":[["url","https://en.wikipedia.org/wiki/Order_book_(trading)"],["accessDate","2015-06-24 10:12:56"],["title","Order book (trading) - Wikipedia, the free encyclopedia"]],"authors":[],"id":5120,"file":"DKD757F3/Order_book_(trading).html","tags":[]}


  {-  Search all itemsID which has title or tag with 
      the word category. 
  -}
  > rows <- runDBConn db (searchByTitleTags "category") 
  > rows
  [5167,5975,5977,5979]

  -- Get all item's data
  --
  > :t runDBConn db (itemData 5167)
  runDBConn db (itemData 5167) :: IO [(String, String)]

  > runDBConn db (itemData 5167)
  [("url","https://news.ycombinator.com/item?id=9459520"),("accessDate","2015-06-25 22:59:16"),("title","Category Theory for Programmers | Hacker News")]
  > 

  -- Get attachment file
  --
  > runDBConn db (itemAttachmentFile 5167)
  Just "6F3H3J7D/item.html"

  > runDBConn db (itemAttachmentFile 5975)
  Just "Q9T3GPMJ/arrows.pdf"

  > runDBConn db (itemAttachmentFile 5977)
  Just "JQPTNHAB/Category Theory Lecture Notes for ESSLLI.pdf"

  > runDBConn db (itemAttachmentFile 5979)
  Just "T2W7HJBI/CategoryTheory.pdf"

  --------------------------------------     
  --  Get all tags
  --------------------------------------

  > runDBConn db (getTags) >>= mapM_ print

  ZoteroTag {zoteroTagID = 337, zoteroTagName = ".net"}
  ZoteroTag {zoteroTagID = 120, zoteroTagName = "8051"}
  ZoteroTag {zoteroTagID = 307, zoteroTagName = "abi"}
  ZoteroTag {zoteroTagID = 341, zoteroTagName = "actors"}
  ZoteroTag {zoteroTagID = 9, zoteroTagName = "advanced"}
  ZoteroTag {zoteroTagID = 142, zoteroTagName = "amortization"}
  ZoteroTag {zoteroTagID = 14, zoteroTagName = "analysis"}
  ZoteroTag {zoteroTagID = 262, zoteroTagName = "anbima"}

            ... ... ... ..
                
  ZoteroTag {zoteroTagID = 53, zoteroTagName = "sensor"}
  ZoteroTag {zoteroTagID = 161, zoteroTagName = "Sequential machine theory"}
  ZoteroTag {zoteroTagID = 240, zoteroTagName = "serialization"}
  ZoteroTag {zoteroTagID = 235, zoteroTagName = "server"}
  ZoteroTag {zoteroTagID = 204, zoteroTagName = "signal"}
  ZoteroTag {zoteroTagID = 110, zoteroTagName = "simulation"}
  ZoteroTag {zoteroTagID = 294, zoteroTagName = "soap"}
  ZoteroTag {zoteroTagID = 39, zoteroTagName = "socket"}
  ZoteroTag {zoteroTagID = 99, zoteroTagName = "software"}

  --------------------------------------     
  --  Get all collections 
  --------------------------------------

  > runDBConn db Z.getCollections  >>= mapM_ print

  ZoteroColl {zoteroCollID = 230, zoteroCollName = "Algorithm"}
  ZoteroColl {zoteroCollID = 8, zoteroCollName = "Android"}
  ZoteroColl {zoteroCollID = 252, zoteroCollName = "Application"}
  ZoteroColl {zoteroCollID = 317, zoteroCollName = "Arrows"}
  ZoteroColl {zoteroCollID = 58, zoteroCollName = "Austrian School"}
  ZoteroColl {zoteroCollID = 195, zoteroCollName = "Backup Time Machine"}
  ZoteroColl {zoteroCollID = 86, zoteroCollName = "Ball Bearing - Rolamentos"}
  ZoteroColl {zoteroCollID = 22, zoteroCollName = "Beagle Bone ARM"}
  ZoteroColl {zoteroCollID = 87, zoteroCollName = "Bearings"}
  ZoteroColl {zoteroCollID = 89, zoteroCollName = "Belts"}

                   ... ... ... .... ... ...

  ZoteroColl {zoteroCollID = 102, zoteroCollName = "Plastics Manufacturing Process"}
  ZoteroColl {zoteroCollID = 81, zoteroCollName = "Pneumatic and Hidraulic"}    
#+END_SRC

** REST API doc
*** End Points
    
The API has the following scheme:

| URL Route               | Description                                       |   |
|-------------------------+---------------------------------------------------+---|
| =/api=                  | Display the API documentation                     |   |
| =/api/colls=            | Returns all collections names and collections IDs |   |
| =/api/coll?id=20=       | Returns all items from collection which ID is 20  |   |
| =/api/item?id=10=       | Return the item which ID is 10                    |   |
| =/api/attachment?id=20= | Return a link to file of item  which ID is 10     |   |
|                         |                                                   |   |
*** Examples 
**** Get item by Id 

#+BEGIN_SRC json
  $ curl -s http://localhost:8000/api/item?id=17 |  python -mjson.tool
  {
      "mime": null,
      "colls": [
          [
              7,
              "Linux"
          ]
      ],
      "data": [
          [
              "url",
              "http://www.digilife.be/quickreferences/QRC/LINUX%20Admin%20Quick%20Reference.pdf"
          ],
          [
              "accessDate",
              "2016-11-07 22:06:48"
          ],
          [
              "title",
              "inux/Unix Command Line Cheat Sheet"
          ]
      ],
      "authors": [],
      "id": 17,
      "file": "6DHDAQAP/LINUX Admin Quick Reference.pdf",
      "tags": [
          [
              8,
              "quickref"
          ],
          [
              9,
              "linux"
          ]
      ]
  }

#+END_SRC

**** Get Collections 

Example: Querying the REST api with curl: 

Get collections:

#+BEGIN_SRC json
  $ curl -s http://localhost:8000/api/colls |  python -mjson.tool
  [
      {
          "name": "C++/CPP",
          "id": 8
      },
      {
          "name": "Fsharp",
          "id": 6
      },
      {
          "name": "Haskell",
          "id": 2
      },
      {
          "name": "Haskell Tutorials",
          "id": 5
      },
      {
          "name": "Haskell doc",
          "id": 3
      },
      {
          "name": "Linux",
          "id": 7
      }
  ]

#+END_SRC

**** Get all Items from a Collection 

Query all items wich belongs to collection Fsharp which id=6.

#+BEGIN_SRC json
  $ curl -s http://localhost:8000/api/colls?id=6 |  python -mjson.tool
  [
      {
          "mime": null,
          "colls": [
              [
                  6,
                  "Fsharp"
              ]
          ],
          "data": [
              [
                  "url",
                  "http://tomasp.net/articles/fsharp-i-introduction/article.pdf"
              ],
              [
                  "accessDate",
                  "2016-11-07 22:01:04"
              ],
              [
                  "title",
                  "F# Language Overview"
              ]
          ],
          "authors": [
              {
                  "first": "Tomas",
                  "last": "Petriceck",
                  "id": 4
              }
          ],
          "id": 12,
          "file": "678BV2HV/article.pdf",
          "tags": [
              [
                  2,
                  "fp"
              ],
              [
                  3,
                  "fsharp"
              ],
              [
                  4,
                  "doc"
              ],
              [
                  5,
                  "overview"
              ]
          ]
      },
      {
          "mime": null,
          "colls": [
              [
                  6,
                  "Fsharp"
              ]
          ],
          "data": [
              [
                  "url",
                  "http://fsharp.org/specs/language-spec/4.0/FSharpSpec-4.0-latest.pdf"
              ],
              [
                  "accessDate",
                  "2016-11-07 22:00:06"
              ],
              [
                  "title",
                  "The F# 4.0 Language Specification"
              ]
          ],
          "authors": [
              {
                  "first": "Syme",
                  "last": "Don",
                  "id": 5
              },
              {
                  "first": "Alimov",
                  "last": "Anar",
                  "id": 6
              },
              {
                  "first": "Fischer",
                  "last": "Jomo",
                  "id": 7
              }
          ],
          "id": 13,
          "file": "A3APBZAZ/FSharpSpec-4.0-latest.pdf",
          "tags": [
              [
                  2,
                  "fp"
              ],
              [
                  3,
                  "fsharp"
              ],
              [
                  4,
                  "doc"
              ]
          ]
      }
  ]



#+END_SRC

**** Get all authors 

#+BEGIN_SRC json
$ curl -s http://localhost:8000/api/authors |  python -mjson.tool
[
    {
        "first": "",
        "last": "Center for History and New Media",
        "id": 1
    },
    {
        "first": "Alimov",
        "last": "Anar",
        "id": 6
    },
    {
        "first": "Alwyn",
        "last": "Goodloe",
        "id": 20
    },
    {
        "first": "Andrew D.",
        "last": "Gordon",
        "id": 15
    },
    {
        "first": "Dennis M.",
        "last": "Ritchie",
        "id": 9
    },
    {
        "first": "Fischer",
        "last": "Jomo",
        "id": 7
    },

...     ...      ...  ... 
    {
        "first": "Marc",
        "last": "Pouzet",
        "id": 23
    },
    {
        "first": "ONDREJ",
        "last": "\u0160UCH",
        "id": 17
    },
    {
        "first": "Ondrej",
        "last": "\u0160uch",
        "id": 22
    },
    {
        "first": "Paul",
        "last": "Cobbat",
        "id": 8
    },
    {
        "first": "Peter",
        "last": "Jankovic",
        "id": 21
    },
    {
        "first": "R",
        "last": "Hiptmar",
        "id": 13
    },
    {
        "first": "Syme",
        "last": "Don",
        "id": 5
    },
    {
        "first": "Tomas",
        "last": "Petriceck",
        "id": 4
    },
    {
        "first": "Wayne L.",
        "last": "Winston",
        "id": 11
    }
]

#+END_SRC

**** Get all items that belongs to an author 

#+BEGIN_SRC json
  $ curl -s http://localhost:8000/api/authors?id=10 |  python -mjson.tool
  [
      {
          "mime": null,
          "colls": [],
          "data": [
              [
                  "url",
                  "http://jetsonhacks.com/wp-content/uploads/2016/08/unix.pdf"
              ],
              [
                  "volume",
                  "17"
              ],
              [
                  "issue",
                  "7"
              ],
              [
                  "publicationTitle",
                  "Communications of the ACM"
              ],
              [
                  "date",
                  "1974-00-00 1974"
              ],
              [
                  "accessDate",
                  "2016-11-07 22:11:16"
              ],
              [
                  "libraryCatalog",
                  "Google Scholar"
              ],
              [
                  "title",
                  "The UNIX time-sharing system"
              ]
          ],
          "authors": [
              {
                  "first": "Dennis M.",
                  "last": "Ritchie",
                  "id": 9
              },
              {
                  "first": "Ken",
                  "last": "Thompson",
                  "id": 10
              }
          ],
          "id": 21,
          "file": "9NAZ5GJT/unix.pdf",
          "tags": []
      }
  ]

#+END_SRC

**** Get all tags 

#+BEGIN_SRC json
  $ curl -s http://localhost:8000/api/tags |  python -mjson.tool
  [
      {
          "name": "c++",
          "id": 10
      },
      {
          "name": "cpp",
          "id": 14
      },
      {
          "name": "doc",
          "id": 4
      },
      {
          "name": "fp",
          "id": 2
      },
      {
          "name": "frp",
          "id": 16
      },
      {
          "name": "fsharp",
          "id": 3
      },
      ... ... ...

      {
          "name": "numerical",
          "id": 11
      },
      {
          "name": "numerical methods",
          "id": 12
      },
      {
          "name": "overview",
          "id": 5
      },
      {
          "name": "quickref",
          "id": 8
      },
      {
          "name": "reactive",
          "id": 17
      },
      {
          "name": "simulation",
          "id": 15
      },
      {
          "name": "tutorial",
          "id": 7
      }
  ]
      
#+END_SRC

**** Get all items with a tag 

Get all items which contains the tag 'Linux' which Id=9.

#+BEGIN_SRC json
$ curl -s http://localhost:8000/api/tags?id=9 |  python -mjson.tool
[
    {
        "mime": null,
        "colls": [
            [
                7,
                "Linux"
            ]
        ],
        "data": [
            [
                "url",
                "http://www.linuxdevcenter.com/excerpt/LinuxPG_quickref/linux.pdf"
            ],
            [
                "accessDate",
                "2016-11-07 22:05:40"
            ],
            [
                "title",
                "Linux Quick Reference"
            ]
        ],
        "authors": [],
        "id": 15,
        "file": "ZJMVV5V8/linux.pdf",
        "tags": [
            [
                8,
                "quickref"
            ],
            [
                9,
                "linux"
            ]
        ]
    },
    {
        "mime": null,
        "colls": [
            [
                7,
                "Linux"
            ]
        ],
        "data": [
            [
                "url",
                "http://www.digilife.be/quickreferences/QRC/LINUX%20Admin%20Quick%20Reference.pdf"
            ],
            [
                "accessDate",
                "2016-11-07 22:06:48"
            ],
            [
                "title",
                "inux/Unix Command Line Cheat Sheet"
            ]
        ],
        "authors": [],
        "id": 17,
        "file": "6DHDAQAP/LINUX Admin Quick Reference.pdf",
        "tags": [
            [
                8,
                "quickref"
            ],
            [
                9,
                "linux"
            ]
        ]
    }
]

#+END_SRC

**** Search all items which title or word contains a string 

Search all items which contais the word 'cpp'

#+BEGIN_SRC sh
$ curl -s http://localhost:8000/api/search?content=cpp |  python -mjson.tool
[
    {
        "mime": null,
        "colls": [
            [
                8,
                "C++/CPP"
            ]
        ],
        "data": [
            [
                "url",
                "http://www.artima.com/samples/cpp11-14NotesSample.pdf"
            ],
            [
                "accessDate",
                "2016-11-07 22:16:31"
            ],
            [
                "title",
                "Overview of the New C++ (C++11) - cpp11-14NotesSample.pdf"
            ]
        ],
        "authors": [],
        "id": 23,
        "file": "NUGHRAQW/cpp11-14NotesSample.pdf",
        "tags": [
            [
                10,
                "c++"
            ]
        ]
    },
    {
        "mime": null,
        "colls": [],
        "data": [
            [
                "url",
                "http://www.sam.math.ethz.ch/~hiptmair/tmp/NumCSE/NumCSE15.pdf"
            ],
            [
                "accessDate",
                "2016-11-07 22:18:20"
            ],
            [
                "title",
                "NumCSE15.pdf"
            ]
        ],
        "authors": [],
        "id": 26,
        "file": "CGZ9CXT8/NumCSE15.pdf",
        "tags": []
    },
    {
        "mime": null,
        "colls": [],
        "data": [
            [
                "url",
                "http://www.sam.math.ethz.ch/~hiptmair/tmp/NumCSE/NumCSE15.pdf"
            ],
            [
                "accessDate",
                "2016-11-07 22:19:28"
            ],
            [
                "title",
                "NumCSE15.pdf"
            ]
        ],
        "authors": [],
        "id": 28,
        "file": "N8SXGHMN/NumCSE15.pdf",
        "tags": []
    }
]

#+END_SRC
** Haskell Related Documentation 

Happstack Sever Framework 

 - [[https://hackage.haskell.org/package/happstack-server][happstack-server: Web related tools and services.]]

Haskell SQLite Database Driver 

 - [[https://hackage.haskell.org/package/HDBC-sqlite3-2.3.3.1/docs/Database-HDBC-Sqlite3.html][Database.HDBC.Sqlite3]]

Haskell PostgresSQL Database Driver 

 - [[https://hackage.haskell.org/package/HDBC-postgresql][HDBC-postgresql: PostgreSQL driver for HDBC]]

Haskell AESON - Json library 

 - [[https://hackage.haskell.org/package/aeson][aeson: Fast JSON parsing and encoding]]
* Database Documentation 
** Database Tables 
*** Items

#+CAPTION: Table items
| Comlumn            | Type   | Example             | Description           |
|--------------------+--------+---------------------+-----------------------|
| itemID             | int    | 100                 | Unique item ID number |
| itemTypeID         | int    | 14                  | Document type         |
| dateAdded          | string | 2014-08-25 02:38:25 | -                     |
| dateModified       | string | 2014-08-25 02:39:28 | -                     |
| clientDateModified | string | 2014-08-25 02:39:28 | -                     |
| libraryID          | null   | null                | -                     |
| key                | string | VI786R6C            | 8-letters random key  |

*** itemAttachments

#+CAPTION: Table itemAttachments
| Column         | Type   | Example                                           | Description                             |
|----------------+--------+---------------------------------------------------+-----------------------------------------|
| itemID         | int    | 6642                                              | Unique item ID which attachment belongs |
| sourceItemID   | int    | 6643                                              |                                         |
| linkMode       |        | 1                                                 |                                         |
| mimeType       | string | application/pdf                                   | File mime type                          |
| charsetID      | int    | 1                                                 | ID of file charset                      |
| path           | string | 'storage:Server Message Block (SMB) Protocol.pdf' | File name                               |
| originalPath   | string | null                                              |                                         |
| syncState      | int    | 0                                                 |                                         |
| storageModTime | null   | null                                              |                                         |
| storageHash    | null   | null                                              |                                         |
|                |        |                                                   |                                         |
|                |        |                                                   |                                         |
 
Example: 

#+BEGIN_SRC text 
  sqlite> SELECT * FROM itemAttachments LIMIT 1715, 5 ;

  itemID      sourceItemID  linkMode    mimeType         charsetID   path                                                      originalPath  syncState   storageModTime  storageHash
  ----------  ------------  ----------  ---------------  ----------  --------------------------------------------------------  ------------  ----------  --------------  -----------
  2641                      0           application/pdf              storage:Chapter - Steam Distribution and Utilization.pdf                0                                      
  2643        2642          1           text/html        1           storage:discover-some-useful-python-numpy-functions.html                0                                      
  2645        2644          1           text/html        1           storage:common-pitfalls-to-avoid-while-converting-matlab                0                                      
  2647        2646          1           text/html        1           storage:gotchas-in-python-for-matlab-users.html                         0                                      
  2649        2648          1           text/html        1           storage:578881-automated-stock-market-trading-simulation                0                                      
  sqlite> 
#+END_SRC

*** ItemData 

#+CAPTION: Table itemData
| Column  | Type | Example | Description           |
|---------+------+---------+-----------------------|
| itemID  | int  |     110 | Unique item ID number |
| fieldID | int  |      90 | ID of field name      |
| valueID | int  |      93 | ID of field value     |

*** ItemDataValues 

#+CAPTION: Table ItemDataValues
| Column  | Type   | Example                                | Description                  |
|---------+--------+----------------------------------------+------------------------------|
| valueID | int    | 9221                                   | Unique ID of item value      |
| value   | string | 'swp0003.dvi - returnCalculations.pdf' | Value of field for each item |

*** ItemTypes 

#+CAPTION: Table itemData
| Column             | Type   | Example | Description       |
|--------------------+--------+---------+-------------------|
| itemTypeID         | 7      |       8 | ID of item type   |
| typeName           | thesis |  letter | Name of item type |
| templateItemTypeID | int    |       2 | ?                 |
| display            | int    |       1 | ?                 |

Example:

#+BEGIN_SRC text 
  sqlite> SELECT * FROM itemTypes ;
  itemTypeID  typeName    templateItemTypeID  display   
  ----------  ----------  ------------------  ----------
  1           note                            0         
  2           book                            2         
  3           bookSectio  2                   2         
  4           journalArt                      2         
  5           magazineAr                      2         
  6           newspaperA                      2         
  7           thesis                          1
       ...     ...  ...  ...
  29          tvBroadcas                      1         
  30          radioBroad                      1         
  31          podcast                         1         
  32          computerPr                      1         
  33          conference                      1         
  34          document                        2         
  35          encycloped                      1         
  36          dictionary                      1 
#+END_SRC


*** fields

#+CAPTION: Table fields
| Column        | Type  | Example | Description   |
|---------------+-------+---------+---------------|
| fieldID       | 10    |         | ID of field   |
| fieldName     | pages |         | Name of field |
| fieldFormatID | null  | null    | -             |


#+CAPTION: Examples
|    fieldID | fieldName  | fieldFormatID |
| ---------- | ---------- | ------------- |
|          1 | url        |               |
|          2 | rights     |               |
|          3 | series     |               |
|          4 | volume     |               |
|          5 | issue      |               |
|          6 | edition    |               |
|          7 | place      |               |
|          8 | publisher  |               |
|         10 | pages      |               |
|         11 | ISBN       |               |
|        ... | ....       | ....          |
|            |            |               |
|        110 | *title*    |               |
|        115 | bookTitle  |               |
|        116 | shortTitle |               |
|        117 | docketNumb |               |
|        118 | numPages   |               |
|        119 | programTit |               |
|        120 | issuingAut |               |
|        121 | filingDate |               |
|        122 | genre      |               |
|        123 | archive    |               |

*** fileTypes

#+CAPTION: Table fileTypes.
| Column     | Type   | Example | Description |
|------------+--------+---------+-------------|
| fileTypeID | int    | 2       | -           |
| fileType   | string | image   | -           |

Example:

#+BEGIN_SRC text 
  sqlite> SELECT * FROM fileTypes ;

  fileTypeID  fileType  
  ----------  ----------
  1           webpage   
  2           image     
  3           pdf       
  4           audio     
  5           video     
  6           document  
  7           presentati
  sqlite> 
#+END_SRC

*** tags 

#+CAPTION: Table tags
| Column             | Type   | Example             | Description                |
|--------------------+--------+---------------------+----------------------------|
| tagID              | int    | 6                   | Unique tag ID              |
| name               | string | numerical           | Tag name                   |
| type               | int    | 0                   | -                          |
| dateAdded          | string | 2014-08-25 13:44:26 | -                          |
| dateModified       | string | 2014-08-25 13:44:26 | -                          |
| clientDateModified | string | 2014-08-25 13:44:26 | -                          |
| libraryID          | null   | null                | -                          |
| key                | string | AMPGN8ZN            | unique 8-letter random key |
|                    |        |                     |                            |

Example:

#+BEGIN_SRC text 
  sqlite> SELECT * FROM tags LIMIT 20, 5 ;

  tagID       name        type        dateAdded            dateModified         clientDateModified   libraryID   key       
  ----------  ----------  ----------  -------------------  -------------------  -------------------  ----------  ----------
  21          regular     0           2014-08-25 13:48:22  2014-08-25 13:48:22  2014-08-25 13:48:22              WZW8DQ6N  
  22          expression  0           2014-08-25 13:48:25  2014-08-25 13:48:25  2014-08-25 13:48:25              U2W8DN3F  
  23          mathcad     0           2014-08-25 13:49:04  2014-08-25 13:49:04  2014-08-25 13:49:04              68E7JGVZ  
  24          project     0           2014-08-25 13:49:06  2014-12-12 17:32:33  2014-12-12 17:32:33              Z92A4JHU  
  25          documentat  0           2014-08-25 13:49:10  2016-04-22 22:35:22  2016-04-22 22:35:22              ZBS82VN5  
  sqlite> 
#+END_SRC

*** itemTags 

#+CAPTION: Table itemTags
| Column | Type | Example | Description |
|--------+------+---------+-------------|
| itemID | int  | 116     | ID of item  |
| tagID  | int  | 1       | ID of tag   |


Example: 

#+BEGIN_SRC text 
  sqlite> SELECT * FROM itemTags LIMIT 20, 10 ;
  itemID      tagID     
  ----------  ----------
  36          14        
  15          1         
  15          15        
  15          16        
  15          17        
  23          1         
  23          18        
  23          19        
  37          1         
  37          20        
  sqlite> 
#+END_SRC

** Database manipulation
*** Get all collections 

#+header: :results table
#+header: :db testdb/zotero-db.sqlite
#+BEGIN_SRC sqlite 
SELECT   collectionID, collectionName 
FROM     collections 
ORDER BY collectionName
#+END_SRC

#+RESULTS:
| 230 | Algorithm                                                        |
| 119 | C Programming                                                    |
| 284 | C/C++                                                            |
| 270 | Continuations Passing                                            |
| 117 | Contracts                                                        |
|  64 | Control System                                                   |
| 326 | Csharp                                                           |
|  66 | Ctypes                                                           |
| 217 | DSL Domain Specific Language                                     |
|   9 | Data Analysis                                                    |
|  44 | Database                                                         |
| 229 | Decision Tables                                                  |
| 272 | Deterministic Password                                           |
|  19 | Economics                                                        |
| 166 | Elements of Software Construction                                |
|  21 | Embedded Systems                                                 |
| 127 | Encryption                                                       |
|  11 | Engineering                                                      |
| 202 | F# - Fsharp                                                      |
| 225 | Faraday Cage                                                     |
| 200 | Functional Programming                                           |
| 306 | Functional Thinking Serie                                        |
| 122 | Fuzzy Logic                                                      |
|  65 | GUI Toolkit                                                      |


*** Get all items from a given collection 

Get all items from collection "SMB Protocol" which id = 335.

#+header: :results table
#+header: :db testdb/zotero-db.sqlite
#+BEGIN_SRC sqlite 
  SELECT  itemID FROM collectionItems WHERE collectionID = 335
#+END_SRC

#+RESULTS:
| 6626 |
| 6628 |
| 6630 |
| 6632 |
| 6634 |
| 6636 |
| 6638 |
| 6640 |
| 6643 |
| 6645 |
| 6647 |
| 6648 |

*** Search Titles that contains a word 

Search all titles that contains the string "functional".

#+header: :results table
#+header: :db testdb/zotero-db.sqlite
#+BEGIN_SRC sqlite 
  SELECT itemData.itemID, itemDataValues.value  
  FROM   itemData, itemDataValues, itemAttachments
  WHERE  fieldID = 110 
  AND    itemData.valueID = itemDataValues.valueID
  AND    itemAttachments.sourceItemID = itemData.itemID
  AND    itemDataValues.value LIKE "%functional%" 
  LIMIT 10
#+END_SRC

#+RESULTS:
| 1936 | Functional Programming                                                                                       |   |
| 2688 | Currently struggling. Can someone help em transition from functional programming to using OOP? : learnpython |   |
| 2750 | When to use functional programming languages and techniques - TechRepublic                                   |   |
| 2752 | Where functional programming fits in - TechRepublic                                                          |   |
| 2754 | Commercial Uses: Going functional on exotic trades                                                           |   |
| 2794 | An introduction to functional programming                                                                    |   |
| 2798 | functional programming                                                                                       |   |
| 2804 | Concepts and Terminology (Functional Transformation)                                                         |   |
| 2807 | Purely functional data structures                                                                            |   |

*** Search by a Regex Pattern 

#+header: :results table
#+header: :db testdb/zotero-db.sqlite
#+BEGIN_SRC sqlite 
SELECT itemData.itemID, itemDataValues.value  
FROM   itemData, itemDataValues, itemAttachments
WHERE  fieldID = 110 
AND    itemData.valueID = itemDataValues.valueID
AND    itemAttachments.sourceItemID = itemData.itemID
AND    itemDataValues.value REGEXP "*math.*" 
#+END_SRC

*** Text search. 
**** Search all items which title has a word 

Search all items that have the word "haskell".

#+header: :results table
#+header: :db testdb/zotero-db.sqlite
#+BEGIN_SRC sqlite
SELECT DISTINCT itemID 
FROM   fulltextItemWords, fulltextWords
WHERE  fulltextItemWords.wordID = fulltextWords.wordID
AND    fulltextWords.word LIKE "%haskell%"
LIMIT  10
#+END_SRC 

#+RESULTS:
|   4 |
|  33 |
| 298 |
| 299 |
| 332 |
| 347 |
| 362 |
| 441 |
| 468 |
| 476 |

**** Search all itesm which title or content has a given word

Search all items that have the word "haskell" in the title or in the
content.

#+BEGIN_SRC sql 
SELECT itemData.itemID
FROM   itemData, itemDataValues, fulltextItemWords, fulltextWords
WHERE  itemData.fieldID = 110 
AND    itemDataValues.valueID = itemData.valueID
AND    fulltextItemWords.wordID = fulltextWords.wordID
AND    fulltextItemWords.itemID = itemData.itemID
AND    (itemDataValues.value LIKE "%haskell%"
	    OR  
		fulltextWords.word LIKE "%haskell%"
		)	

#+END_SRC

*** Insert Tag 

Insert a new tag if it doesn't exist and return its tagID or ID.

#+BEGIN_SRC sql 
  INSERT INTO tags (name, type, key)
  SELECT "DSL", 0, "XMFAMGDFAS" 
  -- Ensure that the tag is not inserted twice
  WHERE NOT EXISTS (SELECT 1 FROM tags WHERE name = "DSL") ; 
  -- Return the tagID of the new tag inserted or existing
  SELECT tagID FROM tags WHERE name = "DSL"
#+END_SRC

*** Search items which has at least one tag 

Search all items which has at least one tag of "haskell", "ffi", "fp", "functional"

#+header: :results table
#+header: :db testdb/zotero-db.sqlite
#+BEGIN_SRC sqlite  
  SELECT itemTags.itemID, tags.tagID, tags.Name FROM itemTags, tags 
  WHERE  itemTags.tagID = tags.tagID and tags.Name IN ("haskell", "ffi", "fp", "functional")
  LIMIT  10 
#+END_SRC

#+RESULTS:
| 5766 | 182 | haskell |
| 5792 | 182 | haskell |
| 5920 | 182 | haskell |
| 5928 | 182 | haskell |
| 5928 | 189 | fp      |
| 5936 | 182 | haskell |
| 5938 | 189 | fp      |
| 5943 | 182 | haskell |
| 5946 | 189 | fp      |
| 5948 | 189 | fp      |


Refined search return only itemID 

#+header: :results table
#+header: :db testdb/zotero-db.sqlite
#+BEGIN_SRC sqlite 
  SELECT DISTINCT itemTags.itemID FROM itemTags, tags 
  WHERE  itemTags.tagID = tags.tagID and tags.Name IN ("haskell", "ffi", "fp", "functional")
  LIMIT  10
#+END_SRC

#+RESULTS:
| 3105 |
| 3109 |
| 4511 |
| 4598 |
| 5035 |
| 5041 |
| 5167 |
| 5766 |
| 5792 |
| 5815 |

*** Search all items which title at least match one of the word of a list 

#+BEGIN_SRC sql  
SELECT itemData.itemID, itemDataValues.value   
FROM   itemData, itemDataValues, itemAttachments
WHERE  fieldID = 110 
AND    itemData.valueID = itemDataValues.valueID
AND    itemAttachments.sourceItemID = itemData.itemID
AND    (    itemDataValues.value LIKE "%ocaml%"
        OR  itemDataValues.value LIKE "%haskell%"
		OR  itemDataValues.value LIKE "%functional%"
		OR  itemDataValues.value LIKE "%fsharp%"
		OR  itemDataValues.value LIKE "%monad%"
		)
GROUP BY itemData.itemID
#+END_SRC

Output:

#+BEGIN_SRC text 
  itemID|value
  1936|Functional Programming
  2688|Currently struggling. Can someone help em transition from functional programming to using OOP? : learnpython
  2740|Blow your mind - HaskellWiki
  2750|When to use functional programming languages and techniques - TechRepublic
  2752|Where functional programming fits in - TechRepublic

  ...  ... ... ...

  3019|Turning to the Functional Side using C# and F#.
  3703|Functional Programming in Javascript
  3705|Functional programming and the death of the Unix Way | Dan Newcome, blog
  4024|Learn Physics by Programming in Haskell [pdf] | Hacker News
  4027|Learn Physics by Programming in Haskell
  4030|Well-Typed - The Haskell Consultants: Monads: From Web 2.0 to Hardware Drivers

  .... ... ... ... ... 
#+END_SRC
*** Search all items which title contains all words in a list 


#+BEGIN_SRC sql  
SELECT itemData.itemID, itemDataValues.value   
FROM   itemData, itemDataValues, itemAttachments
WHERE  fieldID = 110 
AND    itemData.valueID = itemDataValues.valueID
AND    itemAttachments.sourceItemID = itemData.itemID
AND    (    itemDataValues.value LIKE "%ocaml%"
        OR  itemDataValues.value LIKE "%haskell%"
		OR  itemDataValues.value LIKE "%functional%"
		OR  itemDataValues.value LIKE "%fsharp%"
		OR  itemDataValues.value LIKE "%monad%"
		)
GROUP BY itemData.itemID
#+END_SRC
*** Search all items which title or tags matches all words in a list 

Selects all items which tag or title matches all "%ocaml%" or "%monad%".

#+BEGIN_SRC sql 
  SELECT itemData.itemID, itemDataValues.value   
  FROM   itemData, itemDataValues, itemAttachments, tags, itemTags 
  WHERE  fieldID = 110 
  AND    itemData.valueID = itemDataValues.valueID
  AND    itemAttachments.sourceItemID = itemData.itemID
  AND    itemTags.itemID = itemData.itemID
  AND    itemTags.tagID = tags.tagID
  AND    (     (itemDataValues.value LIKE "%ocaml%" OR tags.Name LIKE "%ocaml%")
          AND  (itemDataValues.value LIKE "%monad%" OR tags.Name LIKE  "%monad%")
          
          )
  GROUP BY itemData.itemID
#+END_SRC
