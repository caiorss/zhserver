#+TITLE: Development Documentation 
#+DESCRIPTION: Documentation for Developers 
#+KEYWORKDS: zotero papers docs documents patent search metadata notes haskell database 
#+STARTUP: contents 

* Development Documentation 
** REPL Testing and Exploration 

Example about how to connec to the database and query the data in the REPL.

#+BEGIN_SRC haskell 
  >
  > :t runDBConn 
  runDBConn :: HDBConn -> DBConn a -> IO a

  > let uri = "sqlite:///home/arch/.mozilla/firefox/dic34vce.default/zotero/zotero2.sqlite" 
  > 
  > Just db <- openDBConnection uri 
  > 
  > :t db
  db :: HDBConn
  > 
  > let rows = runD
  runDBConn   runDbQuery
  > rows <- runDBConn db (collectionItems 211)
  > 
  > rows
  [2917,2921,2922,2924,2925,3099,6602,6603,6604,6618,6620,6621]
  > 
  > 
  > item <- runDBConn db (getZoteroItem 5120)
  > item
  ZoteroItem {zoteroItemID = 5120, zoteroItemData = [("url","https://en.wikipedia.org/wiki/Order_book_(trading)"),("accessDate","2015-06-24 10:12:56"),("title","Order book (trading) - Wikipedia, the free encyclopedia")], zoteroItemAuthors = [], zoteroItemTags = [], zoteroItemCollections = [(262,"OCAML")], zoteroItemFile = Just "DKD757F3/Order_book_(trading).html", zoteroItemMime = Nothing}

  > zoteroItemTags item
  []

  > zoteroItemCollections item
  [(262,"OCAML")]

  > zoteroItemAuthors item
  []

  > zoteroItemData item
  [("url","https://en.wikipedia.org/wiki/Order_book_(trading)"),("accessDate","2015-06-24 10:12:56"),("title","Order book (trading) - Wikipedia, the free encyclopedia")]
  ,*Main Zotero>      


   > json <- runDBConn db (getZoteroItemJSON 5120)
  > LC.putStrLn json
  {"mime":null,"colls":[[262,"OCAML"]],"data":[["url","https://en.wikipedia.org/wiki/Order_book_(trading)"],["accessDate","2015-06-24 10:12:56"],["title","Order book (trading) - Wikipedia, the free encyclopedia"]],"authors":[],"id":5120,"file":"DKD757F3/Order_book_(trading).html","tags":[]}


  {-  Search all itemsID which has title or tag with 
      the word category. 
  -}
  > rows <- runDBConn db (searchByTitleTags "category") 
  > rows
  [5167,5975,5977,5979]

  -- Get all item's data
  --
  > :t runDBConn db (itemData 5167)
  runDBConn db (itemData 5167) :: IO [(String, String)]

  > runDBConn db (itemData 5167)
  [("url","https://news.ycombinator.com/item?id=9459520"),("accessDate","2015-06-25 22:59:16"),("title","Category Theory for Programmers | Hacker News")]
  > 

  -- Get attachment file
  --
  > runDBConn db (itemAttachmentFile 5167)
  Just "6F3H3J7D/item.html"

  > runDBConn db (itemAttachmentFile 5975)
  Just "Q9T3GPMJ/arrows.pdf"

  > runDBConn db (itemAttachmentFile 5977)
  Just "JQPTNHAB/Category Theory Lecture Notes for ESSLLI.pdf"

  > runDBConn db (itemAttachmentFile 5979)
  Just "T2W7HJBI/CategoryTheory.pdf"

  --------------------------------------     
  --  Get all tags
  --------------------------------------

  > runDBConn db (getTags) >>= mapM_ print

  ZoteroTag {zoteroTagID = 337, zoteroTagName = ".net"}
  ZoteroTag {zoteroTagID = 120, zoteroTagName = "8051"}
  ZoteroTag {zoteroTagID = 307, zoteroTagName = "abi"}
  ZoteroTag {zoteroTagID = 341, zoteroTagName = "actors"}
  ZoteroTag {zoteroTagID = 9, zoteroTagName = "advanced"}
  ZoteroTag {zoteroTagID = 142, zoteroTagName = "amortization"}
  ZoteroTag {zoteroTagID = 14, zoteroTagName = "analysis"}
  ZoteroTag {zoteroTagID = 262, zoteroTagName = "anbima"}

            ... ... ... ..
                
  ZoteroTag {zoteroTagID = 53, zoteroTagName = "sensor"}
  ZoteroTag {zoteroTagID = 161, zoteroTagName = "Sequential machine theory"}
  ZoteroTag {zoteroTagID = 240, zoteroTagName = "serialization"}
  ZoteroTag {zoteroTagID = 235, zoteroTagName = "server"}
  ZoteroTag {zoteroTagID = 204, zoteroTagName = "signal"}
  ZoteroTag {zoteroTagID = 110, zoteroTagName = "simulation"}
  ZoteroTag {zoteroTagID = 294, zoteroTagName = "soap"}
  ZoteroTag {zoteroTagID = 39, zoteroTagName = "socket"}
  ZoteroTag {zoteroTagID = 99, zoteroTagName = "software"}

  --------------------------------------     
  --  Get all collections 
  --------------------------------------

  > runDBConn db Z.getCollections  >>= mapM_ print

  ZoteroColl {zoteroCollID = 230, zoteroCollName = "Algorithm"}
  ZoteroColl {zoteroCollID = 8, zoteroCollName = "Android"}
  ZoteroColl {zoteroCollID = 252, zoteroCollName = "Application"}
  ZoteroColl {zoteroCollID = 317, zoteroCollName = "Arrows"}
  ZoteroColl {zoteroCollID = 58, zoteroCollName = "Austrian School"}
  ZoteroColl {zoteroCollID = 195, zoteroCollName = "Backup Time Machine"}
  ZoteroColl {zoteroCollID = 86, zoteroCollName = "Ball Bearing - Rolamentos"}
  ZoteroColl {zoteroCollID = 22, zoteroCollName = "Beagle Bone ARM"}
  ZoteroColl {zoteroCollID = 87, zoteroCollName = "Bearings"}
  ZoteroColl {zoteroCollID = 89, zoteroCollName = "Belts"}

                   ... ... ... .... ... ...

  ZoteroColl {zoteroCollID = 102, zoteroCollName = "Plastics Manufacturing Process"}
  ZoteroColl {zoteroCollID = 81, zoteroCollName = "Pneumatic and Hidraulic"}    
#+END_SRC

** REST API doc
*** End Points

The API has the following scheme:

| URL Route               | Description                                       |   |
|-------------------------+---------------------------------------------------+---|
| =/api=                  | Display the API documentation                     |   |
| =/api/colls=            | Returns all collections names and collections IDs |   |
| =/api/coll?id=20=       | Returns all items from collection which ID is 20  |   |
| =/api/item?id=10=       | Return the item which ID is 10                    |   |
| =/api/attachment?id=20= | Return a link to file of item  which ID is 10     |   |
|                         |                                                   |   |
*** Examples 
**** Get item by Id 

#+BEGIN_SRC json
  $ curl -s http://localhost:8000/api/item?id=17 |  python -mjson.tool
  {
      "mime": null,
      "colls": [
          [
              7,
              "Linux"
          ]
      ],
      "data": [
          [
              "url",
              "http://www.digilife.be/quickreferences/QRC/LINUX%20Admin%20Quick%20Reference.pdf"
          ],
          [
              "accessDate",
              "2016-11-07 22:06:48"
          ],
          [
              "title",
              "inux/Unix Command Line Cheat Sheet"
          ]
      ],
      "authors": [],
      "id": 17,
      "file": "6DHDAQAP/LINUX Admin Quick Reference.pdf",
      "tags": [
          [
              8,
              "quickref"
          ],
          [
              9,
              "linux"
          ]
      ]
  }

#+END_SRC

**** Get Collections 

Example: Querying the REST api with curl: 

Get collections:

#+BEGIN_SRC json
  $ curl -s http://localhost:8000/api/colls |  python -mjson.tool
  [
      {
          "name": "C++/CPP",
          "id": 8
      },
      {
          "name": "Fsharp",
          "id": 6
      },
      {
          "name": "Haskell",
          "id": 2
      },
      {
          "name": "Haskell Tutorials",
          "id": 5
      },
      {
          "name": "Haskell doc",
          "id": 3
      },
      {
          "name": "Linux",
          "id": 7
      }
  ]

#+END_SRC

**** Get all Items from a Collection 

Query all items wich belongs to collection Fsharp which id=6.

#+BEGIN_SRC json
  $ curl -s http://localhost:8000/api/colls?id=6 |  python -mjson.tool
  [
      {
          "mime": null,
          "colls": [
              [
                  6,
                  "Fsharp"
              ]
          ],
          "data": [
              [
                  "url",
                  "http://tomasp.net/articles/fsharp-i-introduction/article.pdf"
              ],
              [
                  "accessDate",
                  "2016-11-07 22:01:04"
              ],
              [
                  "title",
                  "F# Language Overview"
              ]
          ],
          "authors": [
              {
                  "first": "Tomas",
                  "last": "Petriceck",
                  "id": 4
              }
          ],
          "id": 12,
          "file": "678BV2HV/article.pdf",
          "tags": [
              [
                  2,
                  "fp"
              ],
              [
                  3,
                  "fsharp"
              ],
              [
                  4,
                  "doc"
              ],
              [
                  5,
                  "overview"
              ]
          ]
      },
      {
          "mime": null,
          "colls": [
              [
                  6,
                  "Fsharp"
              ]
          ],
          "data": [
              [
                  "url",
                  "http://fsharp.org/specs/language-spec/4.0/FSharpSpec-4.0-latest.pdf"
              ],
              [
                  "accessDate",
                  "2016-11-07 22:00:06"
              ],
              [
                  "title",
                  "The F# 4.0 Language Specification"
              ]
          ],
          "authors": [
              {
                  "first": "Syme",
                  "last": "Don",
                  "id": 5
              },
              {
                  "first": "Alimov",
                  "last": "Anar",
                  "id": 6
              },
              {
                  "first": "Fischer",
                  "last": "Jomo",
                  "id": 7
              }
          ],
          "id": 13,
          "file": "A3APBZAZ/FSharpSpec-4.0-latest.pdf",
          "tags": [
              [
                  2,
                  "fp"
              ],
              [
                  3,
                  "fsharp"
              ],
              [
                  4,
                  "doc"
              ]
          ]
      }
  ]



#+END_SRC

**** Get all authors 

#+BEGIN_SRC json
$ curl -s http://localhost:8000/api/authors |  python -mjson.tool
[
    {
        "first": "",
        "last": "Center for History and New Media",
        "id": 1
    },
    {
        "first": "Alimov",
        "last": "Anar",
        "id": 6
    },
    {
        "first": "Alwyn",
        "last": "Goodloe",
        "id": 20
    },
    {
        "first": "Andrew D.",
        "last": "Gordon",
        "id": 15
    },
    {
        "first": "Dennis M.",
        "last": "Ritchie",
        "id": 9
    },
    {
        "first": "Fischer",
        "last": "Jomo",
        "id": 7
    },

...     ...      ...  ... 
    {
        "first": "Marc",
        "last": "Pouzet",
        "id": 23
    },
    {
        "first": "ONDREJ",
        "last": "\u0160UCH",
        "id": 17
    },
    {
        "first": "Ondrej",
        "last": "\u0160uch",
        "id": 22
    },
    {
        "first": "Paul",
        "last": "Cobbat",
        "id": 8
    },
    {
        "first": "Peter",
        "last": "Jankovic",
        "id": 21
    },
    {
        "first": "R",
        "last": "Hiptmar",
        "id": 13
    },
    {
        "first": "Syme",
        "last": "Don",
        "id": 5
    },
    {
        "first": "Tomas",
        "last": "Petriceck",
        "id": 4
    },
    {
        "first": "Wayne L.",
        "last": "Winston",
        "id": 11
    }
]

#+END_SRC

**** Get all items that belongs to an author 

#+BEGIN_SRC json
  $ curl -s http://localhost:8000/api/authors?id=10 |  python -mjson.tool
  [
      {
          "mime": null,
          "colls": [],
          "data": [
              [
                  "url",
                  "http://jetsonhacks.com/wp-content/uploads/2016/08/unix.pdf"
              ],
              [
                  "volume",
                  "17"
              ],
              [
                  "issue",
                  "7"
              ],
              [
                  "publicationTitle",
                  "Communications of the ACM"
              ],
              [
                  "date",
                  "1974-00-00 1974"
              ],
              [
                  "accessDate",
                  "2016-11-07 22:11:16"
              ],
              [
                  "libraryCatalog",
                  "Google Scholar"
              ],
              [
                  "title",
                  "The UNIX time-sharing system"
              ]
          ],
          "authors": [
              {
                  "first": "Dennis M.",
                  "last": "Ritchie",
                  "id": 9
              },
              {
                  "first": "Ken",
                  "last": "Thompson",
                  "id": 10
              }
          ],
          "id": 21,
          "file": "9NAZ5GJT/unix.pdf",
          "tags": []
      }
  ]

#+END_SRC

**** Get all tags 

#+BEGIN_SRC json
  $ curl -s http://localhost:8000/api/tags |  python -mjson.tool
  [
      {
          "name": "c++",
          "id": 10
      },
      {
          "name": "cpp",
          "id": 14
      },
      {
          "name": "doc",
          "id": 4
      },
      {
          "name": "fp",
          "id": 2
      },
      {
          "name": "frp",
          "id": 16
      },
      {
          "name": "fsharp",
          "id": 3
      },
      ... ... ...

      {
          "name": "numerical",
          "id": 11
      },
      {
          "name": "numerical methods",
          "id": 12
      },
      {
          "name": "overview",
          "id": 5
      },
      {
          "name": "quickref",
          "id": 8
      },
      {
          "name": "reactive",
          "id": 17
      },
      {
          "name": "simulation",
          "id": 15
      },
      {
          "name": "tutorial",
          "id": 7
      }
  ]
      
#+END_SRC

**** Get all items with a tag 

Get all items which contains the tag 'Linux' which Id=9.

#+BEGIN_SRC json
$ curl -s http://localhost:8000/api/tags?id=9 |  python -mjson.tool
[
    {
        "mime": null,
        "colls": [
            [
                7,
                "Linux"
            ]
        ],
        "data": [
            [
                "url",
                "http://www.linuxdevcenter.com/excerpt/LinuxPG_quickref/linux.pdf"
            ],
            [
                "accessDate",
                "2016-11-07 22:05:40"
            ],
            [
                "title",
                "Linux Quick Reference"
            ]
        ],
        "authors": [],
        "id": 15,
        "file": "ZJMVV5V8/linux.pdf",
        "tags": [
            [
                8,
                "quickref"
            ],
            [
                9,
                "linux"
            ]
        ]
    },
    {
        "mime": null,
        "colls": [
            [
                7,
                "Linux"
            ]
        ],
        "data": [
            [
                "url",
                "http://www.digilife.be/quickreferences/QRC/LINUX%20Admin%20Quick%20Reference.pdf"
            ],
            [
                "accessDate",
                "2016-11-07 22:06:48"
            ],
            [
                "title",
                "inux/Unix Command Line Cheat Sheet"
            ]
        ],
        "authors": [],
        "id": 17,
        "file": "6DHDAQAP/LINUX Admin Quick Reference.pdf",
        "tags": [
            [
                8,
                "quickref"
            ],
            [
                9,
                "linux"
            ]
        ]
    }
]

#+END_SRC

**** Search all items which title or word contains a string 

Search all items which contais the word 'cpp'

#+BEGIN_SRC sh
$ curl -s http://localhost:8000/api/search?content=cpp |  python -mjson.tool
[
    {
        "mime": null,
        "colls": [
            [
                8,
                "C++/CPP"
            ]
        ],
        "data": [
            [
                "url",
                "http://www.artima.com/samples/cpp11-14NotesSample.pdf"
            ],
            [
                "accessDate",
                "2016-11-07 22:16:31"
            ],
            [
                "title",
                "Overview of the New C++ (C++11) - cpp11-14NotesSample.pdf"
            ]
        ],
        "authors": [],
        "id": 23,
        "file": "NUGHRAQW/cpp11-14NotesSample.pdf",
        "tags": [
            [
                10,
                "c++"
            ]
        ]
    },
    {
        "mime": null,
        "colls": [],
        "data": [
            [
                "url",
                "http://www.sam.math.ethz.ch/~hiptmair/tmp/NumCSE/NumCSE15.pdf"
            ],
            [
                "accessDate",
                "2016-11-07 22:18:20"
            ],
            [
                "title",
                "NumCSE15.pdf"
            ]
        ],
        "authors": [],
        "id": 26,
        "file": "CGZ9CXT8/NumCSE15.pdf",
        "tags": []
    },
    {
        "mime": null,
        "colls": [],
        "data": [
            [
                "url",
                "http://www.sam.math.ethz.ch/~hiptmair/tmp/NumCSE/NumCSE15.pdf"
            ],
            [
                "accessDate",
                "2016-11-07 22:19:28"
            ],
            [
                "title",
                "NumCSE15.pdf"
            ]
        ],
        "authors": [],
        "id": 28,
        "file": "N8SXGHMN/NumCSE15.pdf",
        "tags": []
    }
]

#+END_SRC
** Haskell Related Documentation 

Happstack Sever Framework 

 - [[https://hackage.haskell.org/package/happstack-server][happstack-server: Web related tools and services.]]

Haskell SQLite Database Driver 

 - [[https://hackage.haskell.org/package/HDBC-sqlite3-2.3.3.1/docs/Database-HDBC-Sqlite3.html][Database.HDBC.Sqlite3]]

Haskell PostgresSQL Database Driver 

 - [[https://hackage.haskell.org/package/HDBC-postgresql][HDBC-postgresql: PostgreSQL driver for HDBC]]

Haskell AESON - Json library 

 - [[https://hackage.haskell.org/package/aeson][aeson: Fast JSON parsing and encoding]]
** Database Documentation 
*** Search Titles that contains a word 

Search all titles that contains the string "functional".

#+BEGIN_SRC sql 
SELECT itemData.itemID, itemDataValues.value  
FROM   itemData, itemDataValues, itemAttachments
WHERE  fieldID = 110 
AND    itemData.valueID = itemDataValues.valueID
AND    itemAttachments.sourceItemID = itemData.itemID
AND    itemDataValues.value LIKE "%functional%" 
#+END_SRC


#+BEGIN_SRC sql 
sqlite> 
sqlite> SELECT itemData.itemID, itemDataValues.value  
   ...> FROM   itemData, itemDataValues, itemAttachments
   ...> WHERE  fieldID = 110 
   ...> AND    itemData.valueID = itemDataValues.valueID
   ...> AND    itemAttachments.sourceItemID = itemData.itemID
   ...> AND    itemDataValues.value LIKE "%functional%" 
   ...> ;
1936|Functional Programming
2688|Currently struggling. Can someone help em transition from functional programming to using OOP? : learnpython
2750|When to use functional programming languages and techniques - TechRepublic
2752|Where functional programming fits in - TechRepublic
2754|Commercial Uses: Going functional on exotic trades
2772|Functional Programming in the Financial Industry | Open Parallel
2794|An introduction to functional programming
2798|functional programming | Math ∩ Programming
...
#+END_SRC
*** Search by a Regex Pattern 

#+BEGIN_SRC sql 
SELECT itemData.itemID, itemDataValues.value  
FROM   itemData, itemDataValues, itemAttachments
WHERE  fieldID = 110 
AND    itemData.valueID = itemDataValues.valueID
AND    itemAttachments.sourceItemID = itemData.itemID
AND    itemDataValues.value REGEXP "math.*" 
#+END_SRC

Result: 

#+BEGIN_SRC sql 
"2987"	"Functional Patterns for the non-mathematician"
"4842"	"Power of mathematics: Reasoning about functional types"
"6094"	"Discrete mathematics using a computer"
#+END_SRC
*** Text search. 
**** Search all items which title has a word 

Search all items that have the word "haskell".

#+BEGIN_SRC sql 
SELECT DISTINCT itemID 
FROM   fulltextItemWords, fulltextWords
WHERE  fulltextItemWords.wordID = fulltextWords.wordID
AND    fulltextWords.word LIKE "%haskell%"
#+END_SRC 

**** Search all itesm which title or content has a given word

Search all items that have the word "haskell" in the title or in the
content.

#+BEGIN_SRC sql 
SELECT itemData.itemID
FROM   itemData, itemDataValues, fulltextItemWords, fulltextWords
WHERE  itemData.fieldID = 110 
AND    itemDataValues.valueID = itemData.valueID
AND    fulltextItemWords.wordID = fulltextWords.wordID
AND    fulltextItemWords.itemID = itemData.itemID
AND    (itemDataValues.value LIKE "%haskell%"
	    OR  
		fulltextWords.word LIKE "%haskell%"
		)	

#+END_SRC

*** Insert Tag 

Insert a new tag if it doesn't exist and return its tagID or ID.

#+BEGIN_SRC sql 
  INSERT INTO tags (name, type, key)
  SELECT "DSL", 0, "XMFAMGDFAS" 
  -- Ensure that the tag is not inserted twice
  WHERE NOT EXISTS (SELECT 1 FROM tags WHERE name = "DSL") ; 
  -- Return the tagID of the new tag inserted or existing
  SELECT tagID FROM tags WHERE name = "DSL"
#+END_SRC

*** Search items which has at least one tag 

Search all items which has at least one tag of "haskell", "ffi", "fp", "functional"

#+BEGIN_SRC sql 
  SELECT itemTags.itemID, tags.tagID, tags.Name FROM itemTags, tags 
  WHERE  itemTags.tagID = tags.tagID and tags.Name IN ("haskell", "ffi", "fp", "functional")
#+END_SRC

Sample output: 

#+BEGIN_SRC text 
  itemID|tagID|name
  5766|182|haskell
  5792|182|haskell
  5920|182|haskell
  5928|182|haskell
  5928|189|fp
  5936|182|haskell
  5938|189|fp
  5943|182|haskell
  5946|189|fp
  5948|189|fp
  5950|189|fp
  5952|189|fp
  5954|189|fp
  5956|189|fp
  5958|189|fp
  5960|189|fp
  5962|189|fp
  5965|189|fp
  5907|182|haskell
  5907|189|fp
  5935|182|haskell
  5935|189|fp
  5969|182|haskell
  5969|189|fp
  5970|182|haskell
  5973|182|haskell
  5973|189|fp
  5975|182|haskell
  5975|189|fp
  5977|189|fp
  5979|189|fp
  5979|182|haskell
  5167|189|fp
  5980|182|haskell
  5980|189|fp
  5985|182|haskell
  5985|189|fp
  5988|182|haskell
  5988|189|fp
  5992|189|fp
  5992|182|haskell
  5994|182|haskell
  ... ... ... 
#+END_SRC

Refined search return only itemID 

#+BEGIN_SRC sql 
  SELECT DISTINCT itemTags.itemID FROM itemTags, tags 
  WHERE  itemTags.tagID = tags.tagID and tags.Name IN ("haskell", "ffi", "fp", "functional") ;        
#+END_SRC

Sample output:

#+BEGIN_SRC text 
  itemID
  5167
  5766
  5792
  5815
  5907
  5920
  5928
  5935
  5936

  ...
#+END_SRC
*** Search all items which title at least match one of the word of a list 

#+BEGIN_SRC sql  
SELECT itemData.itemID, itemDataValues.value   
FROM   itemData, itemDataValues, itemAttachments
WHERE  fieldID = 110 
AND    itemData.valueID = itemDataValues.valueID
AND    itemAttachments.sourceItemID = itemData.itemID
AND    (    itemDataValues.value LIKE "%ocaml%"
        OR  itemDataValues.value LIKE "%haskell%"
		OR  itemDataValues.value LIKE "%functional%"
		OR  itemDataValues.value LIKE "%fsharp%"
		OR  itemDataValues.value LIKE "%monad%"
		)
GROUP BY itemData.itemID
#+END_SRC

Output:

#+BEGIN_SRC text 
  itemID|value
  1936|Functional Programming
  2688|Currently struggling. Can someone help em transition from functional programming to using OOP? : learnpython
  2740|Blow your mind - HaskellWiki
  2750|When to use functional programming languages and techniques - TechRepublic
  2752|Where functional programming fits in - TechRepublic

  ...  ... ... ...

  3019|Turning to the Functional Side using C# and F#.
  3703|Functional Programming in Javascript
  3705|Functional programming and the death of the Unix Way | Dan Newcome, blog
  4024|Learn Physics by Programming in Haskell [pdf] | Hacker News
  4027|Learn Physics by Programming in Haskell
  4030|Well-Typed - The Haskell Consultants: Monads: From Web 2.0 to Hardware Drivers

  .... ... ... ... ... 
#+END_SRC
*** Search all items which title contains all words in a list 


#+BEGIN_SRC sql  
SELECT itemData.itemID, itemDataValues.value   
FROM   itemData, itemDataValues, itemAttachments
WHERE  fieldID = 110 
AND    itemData.valueID = itemDataValues.valueID
AND    itemAttachments.sourceItemID = itemData.itemID
AND    (    itemDataValues.value LIKE "%ocaml%"
        OR  itemDataValues.value LIKE "%haskell%"
		OR  itemDataValues.value LIKE "%functional%"
		OR  itemDataValues.value LIKE "%fsharp%"
		OR  itemDataValues.value LIKE "%monad%"
		)
GROUP BY itemData.itemID
#+END_SRC
*** Search all items which title or tags matches all words in a list 

Selects all items which tag or title matches all "%ocaml%" or "%monad%".

#+BEGIN_SRC sql 
  SELECT itemData.itemID, itemDataValues.value   
  FROM   itemData, itemDataValues, itemAttachments, tags, itemTags 
  WHERE  fieldID = 110 
  AND    itemData.valueID = itemDataValues.valueID
  AND    itemAttachments.sourceItemID = itemData.itemID
  AND    itemTags.itemID = itemData.itemID
  AND    itemTags.tagID = tags.tagID
  AND    (     (itemDataValues.value LIKE "%ocaml%" OR tags.Name LIKE "%ocaml%")
          AND  (itemDataValues.value LIKE "%monad%" OR tags.Name LIKE  "%monad%")
          
          )
  GROUP BY itemData.itemID
#+END_SRC

